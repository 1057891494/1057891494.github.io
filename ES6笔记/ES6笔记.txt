let：块级作用域，用于声明局部变量
======================================
	var a = [];
	for (let i = 0; i < 10; i++) {
	  a[i] = function () {
	    console.log(i);
	  };
	}
	a[6](); // 6
	使用let不会因为闭包导致问题，JavaScript内部引擎会记住上一次i的值，当上一次i循环结束后会被释放并重新开辟一个i的内存空间，每次的i都是一个新的变量
======================================
	for (let i = 0; i < 3; i++) {
	  let i = 'abc';
	  console.log(i);
	}
	上面代码正确运行，输出了3次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。
=======================================
	console.log(foo); // 输出undefined
	var foo = 2;
	+++++++++++++++++++++++++
	// let 的情况
	console.log(bar); // 报错ReferenceError
	let bar = 2;
	let更加严谨，let不会发生变量提升（在声明前被使用）
======================================
	var tmp = 123;
	if (true) {
	  tmp = 'abc'; //正常运行
	}
	++++++++++++++++++++++++
	var tmp = 123;
	if (true) {
	  tmp = 'abc'; // ReferenceError
	  typeof tmp; // ReferenceError
	  let tmp;
	  console.log(tmp); // undefined
	  tmp = 123;
	  console.log(tmp); // 123
	}
	在局部作用域依然可以应用全局变量，但是如果在局部又声明一个与全局变量同名的局部变量，将开辟一个独立的子作用域，如果在声明之前引用全局变量则将导致报错（暂时性死区，该同名变量相关的皆不可用）。
========================================
	// 不报错
	var x = x;
	// 报错
	let x = x;
	报错也是因为暂时性死区（在声明x之前取x值）
========================================
	// 报错
	function func() {
	  let a = 10;
	  var a = 1;
	}
	let的变量不能被重复定义，不分let和var的声明顺序
	// 报错
	function func() {
	  let a = 10;
	  let a = 1;
	}
========================================
	// IIFE 写法
	(function () {						(function () {
	  var tmp = ...;         等同于==>		var tmp = ...;
	  ...									...
	}());								})();

	以上写法可以用下面替代
	// 块级作用域写法
	{
	  let tmp = ...;
	  ...
	}
=========================================
	ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。
==========================================
	function f() { console.log('I am outside!'); }
	(function () {
	  if (false) {
	    // 重复声明一次函数f
	    function f() { console.log('I am inside!'); }
	  }
	  f();
	}());

	在ES5中，将会得到如下：
	// ES5 环境
	function f() { console.log('I am outside!'); }
	(function () {
	  function f() { console.log('I am inside!'); }
	  if (false) {
	  }
	  f();
	}());
	//输出inside
	ES6不会出现这个问题，但浏览器考虑到兼容问题，会将代码处理成ES5环境，浏览器以外环境则不会，
	因此建议不要将代码写成这个样子，避免在块级作用域内声明函数。
=========================================
	// 函数声明语句
	{
	  let a = 'secret';
	  function f() {
	    return a;
	  }
	}
	// 函数表达式
	{
	  let a = 'secret';
	  let f = function () {
	    return a;
	  };
	}
=========================================
	let x = do {
	  let t = f();
	  t * t + 1;
	};
	do表达式，该表达式目前还是提案，尚不可使用

/***********************************************************************************/
const命令
	const声明一个只读的常量。一旦声明，常量的值就不能改变（指向对象不变）。类似java中的final
	const一旦声明变量，就必须立即初始化，不能留到以后赋值。
	const拥有块级作用域，暂时性死区，不可重复声明
=======================================
	如果真的想将对象冻结，应该使用Object.freeze方法。

	const foo = Object.freeze({});
	// 常规模式时，下面一行不起作用；
	// 严格模式时，该行会报错
	foo.prop = 123;
	上面代码中，常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。

	除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。
	var constantize = (obj) => {
	  Object.freeze(obj);
	  Object.keys(obj).forEach( (key, i) => {
	    if ( typeof obj[key] === 'object' ) {
	      constantize( obj[key] );
	    }
	  });
	};
/**********************************************************************************/
顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。
ES5之中，顶层对象的属性与全局变量是等价的。

ES6中，var命令和function命令声明的全局变量，依旧是顶层对象的属性；
	   另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。
	   也就是说，从ES6开始，全局变量将逐步与顶层对象的属性脱钩。
========================================================
1.浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。
2.浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。
3.Node 里面，顶层对象是global，但其他环境都不支持
=======================================================
1.全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。
2.函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。
3.不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。
++++++++++++++++++++++++++++++++++++++++++++++++++
下面是两种勉强可以使用的方法。
// 方法一
(typeof window !== 'undefined'
   ? window
   : (typeof process === 'object' &&
      typeof require === 'function' &&
      typeof global === 'object')
     ? global
     : this);
// 方法二
var getGlobal = function () {
  if (typeof self !== 'undefined') { return self; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  throw new Error('unable to locate global object');
};

现有提案将global作为顶层对象

/************************************************************************/
ES6 允许写成下面这样。
let [a, b, c] = [1, 2, 3];

let [foo, [[bar], baz]] = [1, [[2], 3]];
foo // 1
bar // 2
baz // 3

let [ , , third] = ["foo", "bar", "baz"];
third // "baz"

let [x, , y] = [1, 2, 3];
x // 1
y // 3

let [head, ...tail] = [1, 2, 3, 4];
head // 1
tail // [2, 3, 4]

let [x, y, ...z] = ['a'];
x // "a"
y // undefined
z // []
===============================================
let { bar, foo } = { foo: "aaa", bar: "bbb" };
foo // "aaa"
bar // "bbb"
对象赋值与属性顺序无关
==============================================
const [a, b, c, d, e] = 'hello';
a // "h"
b // "e"
c // "l"
d // "l"
e // "o"
/********************************************************************/
传统上，JavaScript只有indexOf方法
ES6又提供了三种新方法。
includes()：返回布尔值，表示是否找到了参数字符串。
startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
==================================================
repeat方法返回一个新字符串，表示将原字符串重复n次。
'x'.repeat(3) // "xxx"
'hello'.repeat(2) // "hellohello"
'na'.repeat(0) // ""
参数如果是小数，会被取整（向下取整，负数向上，即-0.2->0）。
如果repeat的参数是负数或者Infinity，会报错
参数NaN等同于0。
如果repeat的参数是字符串，则会先转换成数字。
/********************************************************************/
$('#result').append(
  'There are <b>' + basket.count + '</b> ' +
  'items in your basket, ' +
  '<em>' + basket.onSale +
  '</em> are on sale!'
);

==>

$('#result').append(`
  There are <b>${basket.count}</b> items
   in your basket, <em>${basket.onSale}</em>
  are on sale!
`);
如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。
大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性,还能调用函数
========================================
$('#list').html(`
<ul>
  <li>first</li>
  <li>second</li>
</ul>
`);
上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。
========================================
var s = 'aaa_aa_a';
var r1 = /a+/g;
var r2 = /a+/y;

r1.exec(s) // ["aaa"]
r2.exec(s) // ["aaa"]

r1.exec(s) // ["aa"]
r2.exec(s) // null
======================================
'a1a2a3'.match(/a\d/y) // ["a1"]
'a1a2a3'.match(/a\d/g) // ["a1","a2","a3"]
=======================================
.可以匹配任意字符带不能匹配1.U+000A 换行符（\n）2.U+000D 回车符（\r）
					3.U+2028 行分隔符（line separator）4.U+2029 段分隔符（paragraph separator）
/foo[^]bar/.test('foo\nbar')
// true
====================================
用0b或0o开头表示8进制
=====================================
ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。
function log(x, y = 'World') {
  console.log(x, y);
}

log('Hello') // Hello World
log('Hello', 'China') // Hello China
log('Hello', '') // Hello
+++++++++++++++++++++++++++++++++
参数变量是默认声明的，所以不能用let或const再次声明。
function foo(x = 5) {
  let x = 1; // error
  const x = 2; // error
}
=======================================
只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。
因为执行函数使先执行函数参数，再执行函数体，参数并没有设置为严格模式。
可以通过在全局设置严格模式或者把函数包在一个无参数的立即执行函数里面
'use strict';

function doSomething(a, b = a) {
  // code
}

const doSomething = (function () {
  'use strict';
  return function(value = 42) {
    return value;
  };
}());
/********************************************************************/
箭头函数
	var f=v=>v
	等价于
	var f=function(v){
		return v;
	}
+++++++++++++++++++++++++++++++++++
	var f=()=>v
	等价于
	var f=function(){
		return v;
	}
+++++++++++++++++++++++++++++++++++
	var sum = (num1, num2) => { return num1 + num2; }
	如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回
	var sum = (num1, num2) => { alert(num1+num2); }
	无返回值
++++++++++++++++++++++++++++++++++++
	let getTempItem = id => ({ id: id, name: "Temp" });
	如果返回的是一个对象，需要用括号括起来，避免被解释为代码块，不然会报错
=====================================================
箭头函数有几个使用注意点。
（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
